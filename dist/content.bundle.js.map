{"version":3,"file":"content.bundle.js","mappings":"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","sources":["webpack://clarify-ai/./src/services/index.js","webpack://clarify-ai/./src/utils/helpers.js","webpack://clarify-ai/./src/utils/constants.js","webpack://clarify-ai/./src/utils/coordinates.js","webpack://clarify-ai/./src/components/fadeOut.js","webpack://clarify-ai/./src/components/popup.js","webpack://clarify-ai/./src/components/arrow.js","webpack://clarify-ai/./src/components/popupContent.js","webpack://clarify-ai/./src/components/popupContainer.js","webpack://clarify-ai/./src/utils/animations.js","webpack://clarify-ai/./src/utils/popupEventListeners.js","webpack://clarify-ai/./src/content.js"],"sourcesContent":["import axios from \"axios\";\n\nconst API_KEY_AI = \"40xWby26Fb2w295NMSXdJRtWbVsgWqgd\";\nconst apiUrl =\n  \"https://api.deepinfra.com/v1/inference/meta-llama/Llama-2-70b-chat-hf\";\n\nconst headers = {\n  \"Content-Type\": \"application/json\",\n  Authorization: `Bearer ${API_KEY_AI}`,\n};\n\nexport const generateText = async (prompt) => {\n  const requestData = {\n    input: `[INST] <<SYS>> You are a science communicator, your task is to read the following\n            text snippet and describe its content in a simple, short, and understandable way,\n            ensuring clarity for a general audience <<SYS>> ${prompt}[/INST]`,\n  };\n\n  try {\n    const request = await axios.post(apiUrl, requestData, { headers: headers });\n    return request.data;\n  } catch (error) {\n    console.error(\"Error:\", error);\n    return error;\n  }\n};\n","// Gets coordinates of user text selection\nexport const getSelectionCords = (selection) => {\n  if (selection.rangeCount > 0) {\n    const range = selection.getRangeAt(0);\n    const boundingRect = range.getBoundingClientRect();\n\n    return {\n      top: boundingRect.top + window.scrollY,\n      left: boundingRect.left + window.scrollX,\n      bottom: boundingRect.bottom + window.scrollY,\n      right: boundingRect.right + window.scrollX,\n    };\n  }\n};\n\n// Checks whether the selection is in top or bottom half of a screen\nexport const isInTopHalf = (selection) => {\n  const range = selection.getRangeAt(0);\n  const boundingRect = range.getBoundingClientRect();\n\n  const verticalMidpoint = window.innerHeight / 2;\n\n  return boundingRect.top + boundingRect.height / 2 < verticalMidpoint\n    ? true\n    : false;\n};\n\n// Returns the root of popup shadow DOM\nexport const getShadowRoot = () =>\n  document.getElementById(\"rootContainer\").shadowRoot;\n\n// Returns the main container of popup\nexport const getPopupContainer = () => {\n  const root = getShadowRoot();\n  const popup = root.querySelector(\"#popupContainer\");\n\n  return popup;\n};\n","const containerWidth = 350;\nconst containerHeight = 200;\n\n// IDs\nconst popupId = \"popupContainer\";\nconst popupContentId = \"popupContent\";\nconst rootContainerId = \"rootContainer\";\n\nexport {\n  containerHeight,\n  containerWidth,\n  popupId,\n  popupContentId,\n  rootContainerId,\n};\n","import { isInTopHalf, getSelectionCords } from \"./helpers\";\nimport { containerHeight, containerWidth } from \"./constants\";\n\nconst selection = window.getSelection();\nconst isInTop = isInTopHalf(selection);\n\nconst { top, left, bottom, right } = getSelectionCords(selection);\n\n// Vertical position when shown\nconst verticalPos = isInTop ? bottom + 10 : top - containerHeight - 10;\n// Vertical position when hidden\nconst verticalPosHidden = isInTop\n  ? verticalPos - containerHeight / 2\n  : verticalPos + containerHeight / 2;\nconst horizontalPos = (left + right) / 2 - containerWidth / 2;\n\nexport { verticalPos, verticalPosHidden, horizontalPos, isInTop };\n","// Creates the effect of a text fading out at the bottom and the top insides of a popup\nconst createFadeOut = (side) => {\n  const fadeOut = document.createElement(\"div\");\n\n  if (side === \"top\") {\n    fadeOut.style.cssText = `\n    position: absolute;\n    z-index: 30001;\n    top: 0;\n    height: 15px;\n    width: 100%;\n    background: linear-gradient(to bottom, rgba(27, 18, 18, 0.6), rgba(27, 18, 18, 0) 95%);\n    border-top-right-radius: 7px;\n    border-top-left-radius: 7px;\n`;\n  } else {\n    fadeOut.style.cssText = `\n    position: absolute;\n    z-index: 30001;\n    top: 160px;\n    height: 40px;\n    width: 100%;\n    background: linear-gradient(to top, rgba(27, 18, 18, 0.8), rgba(27, 18, 18, 0) 95%);\n    border-bottom-right-radius: 7px;\n    border-bottom-left-radius: 7px;\n`;\n  }\n  return fadeOut;\n};\n\nexport default createFadeOut;\n","import { openPopupAnimation } from \"../utils/animations\";\nimport createArrow from \"./arrow\";\nimport createFadeOut from \"./fadeOut\";\nimport createPopupContainer from \"./popupContainer\";\nimport createPopupContent from \"./popupContent\";\nimport { verticalPos, horizontalPos, isInTop } from \"../utils/coordinates\";\n\n// Creation of all popup components\nconst arrow = createArrow(isInTop);\nconst popupContent = createPopupContent();\nconst fadeOutBottom = createFadeOut(\"bottom\");\nconst fadeOutTop = createFadeOut(\"top\");\nconst popupContainer = createPopupContainer(horizontalPos);\n\n// Assembling the components into a popup\npopupContainer.appendChild(fadeOutBottom);\npopupContainer.appendChild(fadeOutTop);\npopupContainer.appendChild(arrow);\npopupContainer.appendChild(popupContent);\n\n// Opening a popup\nopenPopupAnimation(verticalPos);\n\nexport default popupContainer;\n","import { containerWidth } from \"../utils/constants\";\n\n// Creates arrow of a popup which points to user selection\nconst createArrow = (isInTop) => {\n  // Checks whether the arrow should be on top or bottom side\n  const arrowVertPosition = isInTop ? \"-10px\" : \"185px\";\n  // Rotates arrow based on where it's located\n  const arrowPoint = isInTop ? -45 : 135;\n\n  const arrow = document.createElement(\"div\");\n  arrow.style.cssText = `position: absolute;\n    z-index: 2999;\n    width: 25px;\n    height: 25px;\n    background: rgb(238,174,202);\n    background: linear-gradient(45deg, rgba(238,174,202,0) 55%, rgba(27, 18, 18, 0.8) 58%);\n    left: ${containerWidth / 2}px;\n    top: ${arrowVertPosition};\n    transform: rotate(${arrowPoint}deg);\n    border-radius: 5px;\n    `;\n\n  return arrow;\n};\n\nexport default createArrow;\n","import { popupContentId } from \"../utils/constants\";\n\n// Creates the container for the content to fit in, this is where the generated text goes\nconst createPopupContent = () => {\n  const popupContent = document.createElement(\"p\");\n  popupContent.setAttribute(\"id\", popupContentId);\n\n  popupContent.style.cssText = `color: rgb(249, 246, 238);\n    margin: 0;\n    height: calc(100% - 35px);\n    padding-right: 15px;\n    padding-left: 15px;\n    padding-top: 15px;\n    padding-bottom: 15px;\n    font-size: 15px;\n    overflow: scroll;\n    position: relative;\n    `;\n\n  return popupContent;\n};\n\nexport default createPopupContent;\n","import { popupId } from \"../utils/constants\";\nimport { containerHeight, containerWidth } from \"../utils/constants\";\nimport { verticalPosHidden } from \"../utils/coordinates\";\n\n// Creates the popup container, acts as a skeleton of a popup\nconst createPopupContainer = (horizontalPos) => {\n  const popupContainer = document.createElement(\"div\");\n  popupContainer.setAttribute(\"id\", popupId);\n\n  popupContainer.style.cssText = `\n    transform: scale(0);\n    transition: all linear 0.2s;\n    width: ${containerWidth}px;\n    height: ${containerHeight}px;\n    background-color: rgba(27, 18, 18, 0.8);\n    position: absolute;\n    z-index: 30000;\n    border-radius: 7px;\n    backdrop-filter: blur(5px);\n    top: ${verticalPosHidden}px;\n    left: ${horizontalPos}px;\n    box-shadow: 0px 0px 10px rgba(27, 18, 18, 0.7);\n    color: white;\n    `;\n\n  return popupContainer;\n};\n\nexport default createPopupContainer;\n","import { getPopupContainer } from \"./helpers\";\nimport { verticalPosHidden } from \"./coordinates\";\n\nexport const openPopupAnimation = (verticalPos) => {\n  setTimeout(() => {\n    const popup = getPopupContainer();\n\n    popup.style.transform = \"scale(1)\";\n    popup.style.top = `${verticalPos}px`;\n  }, 100);\n};\n\n// export const popupCloseAnimation = () => {\n//   const root = getShadowRoot();\n//   const popup = root.querySelector(\"#popupContainer\");\n//   popup.style.transform = `scale(0)`;\n//   popup.style.top = `${verticalPosHidden}px`;\n// };\n\nexport const closePopupAnimation = () => {\n  const popup = getPopupContainer();\n  popup.style.transform = `scale(0)`;\n  popup.style.top = `${verticalPosHidden}px`;\n};\n","import { closePopupAnimation } from \"./animations\";\nimport { getPopupContainer } from \"./helpers\";\n\n// Counter for smooth popup close\nlet scrollCount = 0;\nconst maxScrollCount = 50;\n\nconst handlePopupClose = () => {\n  const popupContainer = getPopupContainer();\n\n  closePopupAnimation();\n\n  // Removes popup from DOM\n  setTimeout(() => {\n    popupContainer.remove();\n  }, 200);\n\n  // Removing all the listeners\n  document.removeEventListener(\"click\", handleEvent);\n  window.removeEventListener(\"scroll\", handleEvent);\n};\n\nconst handleEvent = (e) => {\n  const popupContainer = getPopupContainer();\n\n  if (!popupContainer.contains(e.target)) {\n    scrollCount++;\n\n    if (e.type === \"scroll\" && scrollCount >= maxScrollCount) {\n      handlePopupClose();\n    } else if (e.type === \"click\") {\n      handlePopupClose();\n    }\n  }\n};\n\nconst listenPopupEvents = () => {\n  document.addEventListener(\"click\", handleEvent);\n  window.addEventListener(\"scroll\", handleEvent);\n};\n\nexport default listenPopupEvents;\n","import { generateText } from \"./services\";\nimport popup from \"./components/popup.js\";\nimport listenPopupEvents from \"./utils/popupEventListeners.js\";\nimport { popupContentId, rootContainerId } from \"./utils/constants.js\";\n\nconst selection = window.getSelection();\n// // generateText(selection.toString()).then((data) => {\n// //   const text = data.results[0].generated_text;\n// //   console.log(text);\n// // });\n\nconst popupContent = popup.querySelector(`#${popupContentId}`);\npopupContent.innerHTML = selection.toString();\nlistenPopupEvents();\n\nconst rootContainer = document.createElement(\"div\");\nrootContainer.setAttribute(\"id\", rootContainerId);\ndocument.body.insertAdjacentHTML(\"afterbegin\", rootContainer.outerHTML);\n\nconst shadowRoot = document\n  .getElementById(rootContainerId)\n  .attachShadow({ mode: \"open\" });\n\nshadowRoot.innerHTML = `\n  ${popup.outerHTML}`;\n"],"names":["getPopupContainer","document","getElementById","shadowRoot","querySelector","popupContentId","rootContainerId","selection","window","getSelection","isInTop","boundingRect","getRangeAt","getBoundingClientRect","verticalMidpoint","innerHeight","top","height","isInTopHalf","left","bottom","right","rangeCount","scrollY","scrollX","getSelectionCords","verticalPos","verticalPosHidden","containerHeight","horizontalPos","containerWidth","side","fadeOut","createElement","style","cssText","arrow","arrowVertPosition","arrowPoint","createArrow","popupContent","createPopupContent","setAttribute","fadeOutBottom","createFadeOut","fadeOutTop","popupContainer","createPopupContainer","appendChild","setTimeout","popup","transform","openPopupAnimation","scrollCount","handleEvent","e","contains","target","type","handlePopupClose","closePopupAnimation","remove","removeEventListener","innerHTML","toString","addEventListener","rootContainer","body","insertAdjacentHTML","outerHTML","attachShadow","mode"],"sourceRoot":""}