{"version":3,"file":"content.bundle.js","mappings":"mBAEA,MCCMA,EAAYC,OAAOC,gBACjBC,IAAG,OAAEC,EAAI,OAAEC,EAAM,MAAEC,GCJON,KAChC,GAAIA,EAAUO,WAAa,EAAG,CAC5B,MACMC,EADQR,EAAUS,WAAW,GACRC,wBAE3B,MAAO,CACLP,IAAKK,EAAaL,IAAMF,OAAOU,QAC/BP,KAAMI,EAAaJ,KAAOH,OAAOW,QACjCP,OAAQG,EAAaH,OAASJ,OAAOU,QACrCL,MAAOE,EAAaF,MAAQL,OAAOW,QAEvC,GDPmCC,CAAkBb,GAIjDc,ECMsBd,KAC1B,MACMQ,EADQR,EAAUS,WAAW,GACRC,wBAErBK,EAAmBd,OAAOe,YAAc,EAE9C,OAAOR,EAAaL,IAAMK,EAAaS,OAAS,EAAIF,CAE3C,EDdSG,CAAYlB,GAAaK,EAASF,EAAM,IACtDgB,GAAiBf,EAAOE,GAAS,EAAIc,IAErCC,EAAiBC,SAASC,cAAc,OAC9CF,EAAeG,MAAMC,QAAW,qKAMrBX,mBACCK,MAEZG,SAASI,KAAKC,mBAAmB,aAAcN,EAAeO,U","sources":["webpack://clarify-ai/./src/services/index.js","webpack://clarify-ai/./src/content.js","webpack://clarify-ai/./src/utils/helpers.js"],"sourcesContent":["import axios from \"axios\";\n\nconst API_KEY_AI = \"40xWby26Fb2w295NMSXdJRtWbVsgWqgd\";\nconst apiUrl =\n  \"https://api.deepinfra.com/v1/inference/meta-llama/Llama-2-70b-chat-hf\";\n\nconst headers = {\n  \"Content-Type\": \"application/json\",\n  Authorization: `Bearer ${API_KEY_AI}`,\n};\n\nexport const generateText = (prompt) => {\n  const requestData = {\n    input: `[INST] <<SYS>> You are a science communicator, your task is to read the following\n            text snippet and describe its content in a simple, short, and understandable way,\n            ensuring clarity for a general audience <<SYS>> ${prompt}[/INST]`,\n  };\n\n  axios\n    .post(apiUrl, requestData, { headers: headers })\n    .then((response) => {\n      console.log(\"Response:\", response.data);\n      return response.data;\n    })\n    .catch((error) => {\n      console.error(\"Error:\", error);\n      return error;\n    });\n};\n","import { generateText } from \"./services\";\nimport { getSelectionCords, isInTopHalf } from \"./utils/helpers\";\n\nconst selection = window.getSelection();\nconst { top, left, bottom, right } = getSelectionCords(selection);\n\nconst containerWidth = 350;\n\nconst verticalPos = isInTopHalf(selection) ? bottom : top - 200;\nconst horizontalPos = (left + right) / 2 - containerWidth / 2;\n\nconst popupContainer = document.createElement(\"div\");\npopupContainer.style.cssText = `width: ${containerWidth}px;\n    height: 200px;\n    background-color: rgba(119, 119, 119, 1);\n    position: absolute;\n    z-index: 30000;\n    border-radius: 7px;\n    top: ${verticalPos}px;\n    left: ${horizontalPos}px`;\n\ndocument.body.insertAdjacentHTML(\"afterbegin\", popupContainer.outerHTML);\n\n// const popupDoc = chrome.runtime.getURL(\"/popup.html\");\n// fetch(popupDoc)\n//   .then((obj) => obj.text())\n//   .then((doc) => {\n//     const miau = doc.querySelector(\".popupClarifai\");\n//     console.log(miau);\n//     document.body.insertAdjacentHTML(\"afterbegin\", doc);\n//   })\n//   .catch((error) => {\n//     console.log(error);\n//   });\n","export const getSelectionCords = (selection) => {\n  if (selection.rangeCount > 0) {\n    const range = selection.getRangeAt(0);\n    const boundingRect = range.getBoundingClientRect();\n\n    return {\n      top: boundingRect.top + window.scrollY,\n      left: boundingRect.left + window.scrollX,\n      bottom: boundingRect.bottom + window.scrollY,\n      right: boundingRect.right + window.scrollX,\n    };\n  }\n};\n\nexport const isInTopHalf = (selection) => {\n  const range = selection.getRangeAt(0);\n  const boundingRect = range.getBoundingClientRect();\n\n  const verticalMidpoint = window.innerHeight / 2;\n\n  return boundingRect.top + boundingRect.height / 2 < verticalMidpoint\n    ? true\n    : false;\n};\n"],"names":["selection","window","getSelection","top","left","bottom","right","rangeCount","boundingRect","getRangeAt","getBoundingClientRect","scrollY","scrollX","getSelectionCords","verticalPos","verticalMidpoint","innerHeight","height","isInTopHalf","horizontalPos","containerWidth","popupContainer","document","createElement","style","cssText","body","insertAdjacentHTML","outerHTML"],"sourceRoot":""}