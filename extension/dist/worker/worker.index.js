(()=>{"use strict";const e=new class{constructor(){this.userData=null,this.email=null,this.picture=null,this.freeTrial=null}async login(){try{const e=await this.getAuthToken(!0),t=await this.getUserCredentials(e),o=await this.sendLoginRequest(t);return this.updateUserProps(o),await this.saveUserDataToStorage(),this.userData}catch(e){throw console.error("Login error:",e),e}}async logout(){try{const e=await this.getAuthToken(!1);return e?(await this.removeCachedAuthToken(e),await this.revokeToken(e),console.log("Logged out successfully")):console.log("No token found"),this.updateUserProps(null),await this.clearUserDataFromStorage(),{response:"ok"}}catch(e){throw console.error("Logout error:",e),e}}async saveUserDataToStorage(){await chrome.storage.sync.set({userData:this.userData})}async clearUserDataFromStorage(){await chrome.storage.sync.set({userData:null})}async getAuthToken(e){return new Promise(((t,o)=>{chrome.identity.getAuthToken({interactive:e},(e=>{chrome.runtime.lastError?o(chrome.runtime.lastError):t(e)}))}))}async removeCachedAuthToken(e){return new Promise(((t,o)=>{chrome.identity.removeCachedAuthToken({token:e},(()=>{chrome.runtime.lastError?o(chrome.runtime.lastError):t()}))}))}async revokeToken(e){const t=await fetch("https://accounts.google.com/o/oauth2/revoke?token="+e,{method:"GET"});t.ok||console.error("Error revoking token:",t.statusText)}async getUserCredentials(e){const t=await fetch("https://www.googleapis.com/oauth2/v3/userinfo?access_token="+e);if(!t.ok)throw new Error("Failed to fetch user data");return await t.json()}async sendLoginRequest(e){const t=JSON.stringify(e),o=await fetch("http://localhost:3001/api/auth/signin",{method:"POST",headers:{"Content-Type":"application/json"},body:t});if(!o.ok)throw console.error("Login request failed:",o.status),new Error("Login request failed");return await o.json()}updateUserProps(e){if(!e)return this.userData=null,this.email=null,this.picture=null,void(this.freeTrial=null);this.userData=e,this.email=e.email,this.picture=e.picture,this.freeTrial=e.freeTrial}},t=e=>{"install"!==e.reason&&"update"!==e.reason||(chrome.contextMenus.create({title:"Clarity",contexts:["selection"],id:"mfbigjpknmeflcogckmjhpghdjbfpmle"}),chrome.tabs.create({url:"http://localhost:3000/onboarding/signin"},(e=>{console.log("New tab launched with http://localhost:3000/")})))},o=async()=>{await chrome.storage.sync.get(["userData"]),console.log(miau)},r=async(t,o,r)=>{if("signInRequest"===t.message){const t=await e.login();console.log(t)}else if("logOutRequest"===t.message){const t=await e.logout();console.log(t)}},s=async e=>{if("mfbigjpknmeflcogckmjhpghdjbfpmle"===e.menuItemId){const[e]=await chrome.tabs.query({active:!0,lastFocusedWindow:!0});chrome.scripting.executeScript({target:{tabId:e.id},files:["./content/content.index.js"]})}};(async()=>{chrome.runtime.onInstalled.addListener(t),chrome.runtime.onStartup.addListener(o),chrome.contextMenus.onClicked.addListener(s),chrome.runtime.onMessageExternal.addListener(r),chrome.runtime.onMessage.addListener(r)})()})();
//# sourceMappingURL=worker.index.js.map