{"version":3,"file":"worker/worker.index.js","mappings":"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","sources":["webpack://clarify-ai/./src/services/AuthService.js","webpack://clarify-ai/./src/utils/constants.js","webpack://clarify-ai/./src/handlers/backgroundFunctions.js","webpack://clarify-ai/./src/app.js","webpack://clarify-ai/./src/services/llmService.js"],"sourcesContent":["class AuthService {\n  constructor() {\n    this.userData = null;\n    this.email = null;\n    this.picture = null;\n    this.freeTrial = null;\n  }\n\n  async initialize() {\n    const userData = await chrome.storage.sync.get([\"userData\"]);\n\n    if (!userData) {\n      this.updateUserProps(null);\n      return;\n    }\n    this.updateUserProps(userData);\n  }\n\n  async login() {\n    try {\n      // Step 1: Get authentication token\n      const token = await this.getAuthToken(true);\n\n      // Step 2: Get user credentials using the token\n      const userCreds = await this.getUserCredentials(token);\n\n      // Step 3: Send login request with user credentials\n      const userData = await this.sendLoginRequest(userCreds);\n\n      // Step 4: Update user properties\n      this.updateUserProps(userData);\n\n      console.log(\"Logged in successfully\");\n      return this.userData;\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      throw error;\n    }\n  }\n\n  async logout() {\n    try {\n      // Step 1: Get authentication token\n      const token = await this.getAuthToken(false);\n\n      if (token) {\n        // Step 2: Remove cached authentication token\n        await this.removeCachedAuthToken(token);\n\n        // Step 3: Revoke token\n        await this.revokeToken(token);\n        console.log(\"Logged out successfully\");\n      } else {\n        console.log(\"No token found\");\n      }\n\n      // Step 4: Clear user properties\n      this.updateUserProps(null);\n\n      return { response: \"ok\" };\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n      throw error;\n    }\n  }\n\n  async getAuthToken(interactive) {\n    return new Promise((resolve, reject) => {\n      chrome.identity.getAuthToken({ interactive: interactive }, (token) => {\n        if (chrome.runtime.lastError) {\n          reject(chrome.runtime.lastError);\n        } else {\n          resolve(token);\n        }\n      });\n    });\n  }\n\n  async removeCachedAuthToken(token) {\n    return new Promise((resolve, reject) => {\n      chrome.identity.removeCachedAuthToken({ token: token }, () => {\n        if (!chrome.runtime.lastError) {\n          resolve();\n        } else {\n          reject(chrome.runtime.lastError);\n        }\n      });\n    });\n  }\n\n  async revokeToken(token) {\n    const response = await fetch(\n      \"https://accounts.google.com/o/oauth2/revoke?token=\" + token,\n      {\n        method: \"GET\",\n      }\n    );\n    if (!response.ok) {\n      console.error(\"Error revoking token:\", response.statusText);\n    }\n  }\n\n  async getUserCredentials(token) {\n    const response = await fetch(\n      \"https://www.googleapis.com/oauth2/v3/userinfo?access_token=\" + token\n    );\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch user data\");\n    }\n    return await response.json();\n  }\n\n  async sendLoginRequest(user) {\n    const data = JSON.stringify(user);\n    const response = await fetch(\"http://localhost:3001/api/auth/signin\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: data,\n    });\n    if (!response.ok) {\n      console.error(\"Login request failed:\", response.status);\n      throw new Error(\"Login request failed\");\n    }\n\n    return await response.json();\n  }\n\n  updateUserProps(data) {\n    if (!data) {\n      this.userData = null;\n      this.email = null;\n      this.picture = null;\n      this.freeTrial = null;\n      return;\n    }\n    this.userData = data;\n    this.email = data.email;\n    this.picture = data.picture;\n    this.freeTrial = data.freeTrial;\n  }\n}\n\nconst user = new AuthService();\nexport default user;\n","// Urls\nconst BASE_URL = \"http://localhost:3000\";\nconst ONBOARDING_SIGNIN_URL = `${BASE_URL}/onboarding/signin`;\nconst ONBOARDING_SUCCESS_URL = `${BASE_URL}/onboarding/success`;\n\nexport { BASE_URL, ONBOARDING_SIGNIN_URL, ONBOARDING_SUCCESS_URL };\n","import getGeneratedText from \"../services/llmService\";\nimport user from \"../services/AuthService\";\nimport { BASE_URL, ONBOARDING_SUCCESS_URL } from \"../utils/constants\";\n\nexport const openPage = (url) => {\n  chrome.tabs.create({ url }, (tab) => {\n    console.log(\"New tab launched with\", url);\n  });\n};\n\nconst signIn = async (sendResponse) => {\n  await user.login();\n  await chrome.storage.sync.set({ userData: user.userData });\n  sendResponse({ success: true });\n};\n\nexport const signinReq = async (request, sender, sendResponse) => {\n  try {\n    if (sender.origin === BASE_URL) {\n      await signIn(sendResponse);\n      openPage(ONBOARDING_SUCCESS_URL);\n    } else {\n      await signIn(sendResponse);\n    }\n  } catch (error) {\n    sendResponse({ success: false });\n    handleError(error, \"signinReq\");\n  }\n};\n\nexport const logOutReq = async () => {\n  await user.logout();\n  await chrome.storage.sync.set({ userData: null });\n};\n\nexport const generateTextReq = async (request, sender, sendResponse) => {\n  const generatedText = await getGeneratedText({\n    prompt: request.prompt,\n    email: user.email,\n  });\n\n  sendResponse(generatedText);\n};\n\nexport const createContextMenu = () => {\n  try {\n    chrome.contextMenus.create({\n      title: \"Clarity\",\n      contexts: [\"selection\"],\n      id: \"mfbigjpknmeflcogckmjhpghdjbfpmle\",\n    });\n  } catch (error) {\n    handleError(error, \"createContextMenu\");\n  }\n};\n\nexport const executeScript = async () => {\n  const [tab] = await chrome.tabs.query({\n    active: true,\n    lastFocusedWindow: true,\n  });\n\n  chrome.scripting.executeScript({\n    target: { tabId: tab.id },\n    files: [\"./content/content.index.js\"],\n  });\n};\n","import user from \"./services/AuthService\";\nimport { ONBOARDING_SIGNIN_URL } from \"./utils/constants\";\nimport {\n  signinReq,\n  logOutReq,\n  generateTextReq,\n  createContextMenu,\n  executeScript,\n  openPage,\n} from \"./handlers/backgroundFunctions\";\n\nconst handleError = (error, context) => {\n  console.error(`Error in ${context}:`, error);\n};\n\nconst handleOnInstalled = (details) => {\n  try {\n    if (details.reason !== \"install\" && details.reason !== \"update\") return;\n    createContextMenu();\n    openPage(ONBOARDING_SIGNIN_URL);\n  } catch (error) {\n    handleError(error, \"handleOnInstalled\");\n  }\n};\n\nconst handleOnStartup = async () => {\n  try {\n    const userData = await chrome.storage.sync.get([\"userData\"]);\n    user.updateUserProps(userData);\n  } catch (error) {\n    handleError(error, \"handleOnStartup\");\n  }\n};\n\nconst handleMessages = (request, sender, sendResponse) => {\n  try {\n    if (request.message === \"signInRequest\") {\n      signinReq(request, sender, sendResponse);\n    } else if (request.message === \"logOutRequest\") {\n      logOutReq();\n    } else if (request.message === \"generateText\") {\n      generateTextReq(request, sender, sendResponse);\n    }\n    return true;\n  } catch (error) {\n    handleError(error, \"handleMessages\");\n  }\n};\n\nconst onContextMenuClicked = async (details) => {\n  try {\n    if (details.menuItemId === \"mfbigjpknmeflcogckmjhpghdjbfpmle\") {\n      if (!user.email) {\n        openPage(ONBOARDING_SIGNIN_URL);\n        return;\n      }\n      executeScript();\n    }\n  } catch (error) {\n    handleError(error, \"onContextMenuClicked\");\n  }\n};\n\nconst main = async () => {\n  try {\n    chrome.runtime.onInstalled.addListener(handleOnInstalled);\n    chrome.runtime.onStartup.addListener(handleOnStartup);\n    chrome.contextMenus.onClicked.addListener(onContextMenuClicked);\n    chrome.runtime.onMessageExternal.addListener(handleMessages);\n    chrome.runtime.onMessage.addListener(handleMessages);\n  } catch (error) {\n    handleError(error, \"main\");\n  }\n};\n\nmain();\n","const getGeneratedText = async ({ prompt, email }) => {\n  try {\n    const response = await fetch(\"http://localhost:3001/api/ai/generate\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        prompt,\n        email,\n      }),\n    });\n\n    if (response.status === 402) {\n      return \"Payment required\";\n    }\n\n    const data = await response.json();\n    return data.generatedText;\n  } catch (error) {\n    console.error(\"There was a problem with the fetch operation:\", error);\n  }\n};\n\nexport default getGeneratedText;\n"],"names":["constructor","this","userData","email","picture","freeTrial","initialize","chrome","storage","sync","get","updateUserProps","login","token","getAuthToken","userCreds","getUserCredentials","sendLoginRequest","console","log","error","logout","removeCachedAuthToken","revokeToken","response","interactive","Promise","resolve","reject","identity","runtime","lastError","fetch","method","ok","statusText","Error","json","user","data","JSON","stringify","headers","body","status","BASE_URL","ONBOARDING_SIGNIN_URL","ONBOARDING_SUCCESS_URL","openPage","url","tabs","create","tab","signIn","async","set","sendResponse","success","handleError","context","handleOnInstalled","details","reason","createContextMenu","contextMenus","title","contexts","id","handleOnStartup","handleMessages","request","sender","message","origin","signinReq","logOutReq","prompt","generatedText","getGeneratedText","generateTextReq","onContextMenuClicked","menuItemId","query","active","lastFocusedWindow","scripting","executeScript","target","tabId","files","onInstalled","addListener","onStartup","onClicked","onMessageExternal","onMessage","main"],"sourceRoot":""}